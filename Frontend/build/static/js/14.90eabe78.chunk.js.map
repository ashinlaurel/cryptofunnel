{"version":3,"sources":["components/Typography/PageTitle.js","pages/Refferals/UserRefferals.js"],"names":["PageTitle","children","className","UserRefferals","useState","data","setData","tempcode","setTempCode","discount","setDiscount","refresh","setRefresh","codeExists","setCodeExists","messageModal","setMessageModal","modalMessage","setModalMessage","console","log","UserProfile","getRole","setTotalResults","isModalOpen","setIsModalOpen","closeModal","useEffect","a","payload","pages","page","limit","filters","creatorId","getId","axios","url","API","method","response","out","total","length","getNewCode","id","post","applyInfluencer","handleCreateRefferal","name","getName","creatorName","refCode","isOpen","onClose","layout","onClick","block","size","map","user","i","type","status","Date","createdAt","toLocaleDateString"],"mappings":"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","file":"static/js/14.90eabe78.chunk.js","sourcesContent":["import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import React, { useState, useEffect } from \"react\";\n\nimport PageTitle from \"../../components/Typography/PageTitle\";\n\nimport UserProfile from \"../../helper/auth/UserProfile\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n} from \"@windmill/react-ui\";\n\nimport axios from \"axios\";\nimport { API } from \"../../backend\";\n\nfunction UserRefferals() {\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [tempcode, setTempCode] = useState(\"\");\n  const [discount, setDiscount] = useState(\"10\");\n  const [refresh, setRefresh] = useState(true);\n  const [codeExists, setCodeExists] = useState(false);\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  console.log(\"ROLE\", UserProfile.getRole());\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  function openModal() {\n    setIsModalOpen(true);\n  }\n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n\n  const theModal = () => {\n    return (\n      <Modal isOpen={isModalOpen} onClose={closeModal}>\n        <ModalHeader>New Refferal Code</ModalHeader>\n        <ModalBody>\n          You can use the following refferal code to get a discount !!\n          <div className=\"flex items-center justify-center my-2\">\n            <div className=\"bg-gray-200 my-2 flex font-bold py-2 px-32 text-lg  items-center justify-center rounded-lg\">\n              {/* <div>Code:</div> */}\n              <div>{tempcode}</div>\n            </div>\n            {/* <div class=\" relative ml-2\">\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                <label>\n                  Discount(%)\n                  <input\n                    value={discount}\n                    onChange={(e) => setDiscount(e.target.value)}\n                    placeholder=\"Enter the discount %\"\n                    class=\"shadow-md z-20 my-2 appearance-none rounded border border-gray-400 border-b block pl-2 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </label>\n              </form>\n            </div> */}\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\n           * that if present, would duplicate the buttons in a way similar to this.\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\n           * to Button\n           */}\n          <div className=\"hidden sm:block\">\n            <Button layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"hidden sm:block\">\n            <Button onClick={handleCreateRefferal}>Accept</Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button onClick={handleCreateRefferal} block size=\"large\">\n              Accept\n            </Button>\n          </div>\n        </ModalFooter>\n      </Modal>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  useEffect(() => {\n    // Using an IIFE\n    // (async function thegetter() {\n    //   console.log(\"getter called\");\n    //   let payload = {\n    //     pages: {\n    //       page: page,\n    //       limit: resultsPerPage,\n    //     },\n    //     filters: {\n    //       creatorId: UserProfile.getId(),\n    //     },\n    //   };\n\n    //   try {\n    //     let response = await axios({\n    //       url: `${API}/refferal/${UserProfile.getId()}/getbyuser`,\n    //       method: \"POST\",\n    //       data: payload,\n    //     });\n    //     console.log(response.data.out);\n    //     setTotalResults(response.data.total);\n\n    //     setData(response.data.out);\n    //   } catch (error) {\n    //     throw error;\n    //   }\n    // })();\n    (async function thedocchecker() {\n      console.log(\"checker called\");\n      let payload = {\n        pages: {\n          page: 1,\n          limit: resultsPerPage,\n        },\n        filters: {\n          creatorId: UserProfile.getId(),\n        },\n      };\n\n      try {\n        let response = await axios({\n          url: `${API}/refferal/${UserProfile.getId()}/getbyuser`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        setData(response.data.out);\n        if (response.data.out.length != 0) {\n          setCodeExists(true);\n        }\n        // console.log(codeExists);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [refresh]);\n\n  const getNewCode = async () => {\n    let id = UserProfile.getId();\n    // console.log(id);\n    const payload = { creatorId: id };\n    const response = await axios.post(\n      `${API}/refferal/${UserProfile.getId()}/getNewCode`,\n      payload\n    );\n    console.log(response.data);\n    setTempCode(response.data);\n    setIsModalOpen(true);\n  };\n\n  const applyInfluencer = async () => {\n    let id = UserProfile.getId();\n    // console.log(id);\n    try {\n      const response = await axios.post(\n        `${API}/user/${UserProfile.getId()}/requestInfluencer`\n      );\n      console.log(response.data);\n      setModalMessage(\"Request Send!\");\n      setMessageModal(true);\n    } catch (err) {\n      setModalMessage(\"Sorry, an error occured!\");\n      setMessageModal(true);\n    }\n  };\n\n  const handleCreateRefferal = async () => {\n    let id = UserProfile.getId();\n    let name = UserProfile.getName();\n    console.log(id);\n    const payload = {\n      creatorName: name,\n      creatorId: id,\n      refCode: tempcode,\n      discount: discount,\n    };\n    const response = await axios.post(\n      `${API}/refferal/${UserProfile.getId()}/createnew`,\n      payload\n    );\n\n    console.log(response.data);\n    setTempCode(\"\");\n    setDiscount(\"\");\n    setRefresh(!refresh);\n    setIsModalOpen(false);\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {theModal()}\n      {messageModalComponent()}\n      <PageTitle>Refferals</PageTitle>\n\n      {/* <CTA /> */}\n\n      {codeExists ? (\n        <TableContainer>\n          <Table>\n            <TableHeader>\n              <tr>\n                {/* <TableCell>Client</TableCell> */}\n                <TableCell>Code</TableCell>\n                <TableCell>Discount</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Created At</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow key={i}>\n                  {/* <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <Avatar\n                      className=\"hidden mr-3 md:block\"\n                      src={user.avatar}\n                      alt=\"User image\"\n                    />\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {user.job}\n                      </p>\n                    </div>\n                  </div>\n                </TableCell> */}\n                  <TableCell>\n                    <span className=\"text-sm bg-gray-200 py-1 px-2 font-bold rounded-lg\">\n                      {user.refCode}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm \">{user.discount}%</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge type={user.status}>Active</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter> */}\n        </TableContainer>\n      ) : (\n        <div className=\"mt-2 mb-4\">\n          <Button onClick={getNewCode} size=\"large\">\n            Get New Refferal Code +\n          </Button>\n        </div>\n      )}\n      <div className=\" w-1/2 mt-12 mb-4 text-gray-900\">\n        <p>\n          You can get your own referal codes only with an Influencer account.\n          Click the button to apply and reach out to us at cfemail@gmail.com\n          with your resume to get your Influencer account.\n        </p>\n        <Button onClick={applyInfluencer} size=\"small\" className=\"mt-5\">\n          Apply for Influencer\n        </Button>\n      </div>\n    </>\n  );\n}\n\nexport default UserRefferals;\n"],"sourceRoot":""}