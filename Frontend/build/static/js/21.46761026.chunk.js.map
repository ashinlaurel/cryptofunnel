{"version":3,"sources":["pages/ForgotPassword/ForgotPasswordReset.js"],"names":["ForgotPasswordReset","token","useParams","useState","newpass","setNewpass","newpassconf","setNewpassconf","setPasserror","messageModal","setMessageModal","modalMessage","setModalMessage","issuccModal","setIssuccModal","history","useHistory","resetPass","a","payload","pass","axios","post","API","headers","Authorization","console","log","useEffect","className","isOpen","onClose","onClick","push","type","value","onChange","e","target","placeholder","resetPasswordvalue"],"mappings":"uNAuJeA,UA5Ia,WAC1B,IAAQC,EAAUC,cAAVD,MACR,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAkBK,GAAlB,WACA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAwCP,mBAAS,IAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KACA,EAAoCT,oBAAS,GAA7C,mBACA,GADA,UACsCA,oBAAS,IAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KAEIC,EAAUC,cAERC,EAAS,uCAAG,4BAAAC,EAAA,sEAERC,EAAU,CAAEC,KAAMhB,GAFV,SAGSiB,IAAMC,KAAN,UAClBC,IADkB,8BAErBJ,EACA,CACEK,QAAS,CACPC,cAAc,UAAD,OAAYxB,MARjB,cAcda,GAAe,GAdD,gDAgBdY,QAAQC,IAAI,eAAZ,MACAf,EAAgB,4BAChBF,GAAgB,GAlBF,yDAAH,qDAqBfkB,qBAAU,cAGP,IACH,MAA8BzB,mBAAS,cAAvC,6BAoGA,OAAO,mCAxDH,sBAAK0B,UAAU,4DAAf,UAxCA,mCACE,eAAC,QAAD,CAAOC,OAAQrB,EAAcsB,QAAS,kBAAMrB,GAAgB,IAA5D,UACE,cAAC,cAAD,UAAcC,IACd,cAAC,YAAD,IACA,cAAC,cAAD,UACE,cAAC,SAAD,CACEkB,UAAU,mBACVG,QAAS,kBAAMtB,GAAgB,IAFjC,0BAcN,mCACE,eAAC,QAAD,CAAOoB,OAAQjB,EAAakB,QAAS,kBAAMjB,GAAe,IAA1D,UACE,cAAC,cAAD,0CACA,cAAC,YAAD,IACA,cAAC,cAAD,UACE,cAAC,SAAD,CACEe,UAAU,mBACVG,QAAS,WACPjB,EAAQkB,KAAK,YAHjB,sCAmBJ,qBAAKJ,UAAU,0FAAf,SACE,sBAAKA,UAAU,0DAAf,UACE,qBAAKA,UAAU,UAAf,4BACA,8BACE,sBAAKA,UAAU,wDAAf,UACE,kCACE,gDACA,uBACEA,UAAU,6DACVK,KAAK,WACLC,MAAO/B,EACPgC,SAAU,SAACC,GAAD,OAAOhC,EAAWgC,EAAEC,OAAOH,QACrCI,YAAY,oBAEP,IACT,kCACE,oDACA,uBACEV,UAAU,6DACVK,KAAK,WACLK,YAAY,mBACZC,mBAAoBlC,EACpB8B,SAAU,SAACC,GACT9B,EAAe8B,EAAEC,OAAOH,OACpBE,EAAEC,OAAOH,OAAS/B,EACpBI,EAAa,2BACVA,EAAa,eAM5B,8BACE,cAAC,SAAD,CACEqB,UAAU,wBACVG,QAAS,WACP,GAAI5B,IAAYE,EAGd,OAFAM,EAAgB,+BAChBF,GAAgB,GAGlBO,KARJ","file":"static/js/21.46761026.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { useParams } from \"react-router-dom\";\nimport { Button, Input, HelperText, Label } from \"@windmill/react-ui\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport { API } from \"../../backend\";\nimport axios from \"axios\";\n//  CHANGE EMIAL LINKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\nconst ForgotPasswordReset = () => {\n  const { token } = useParams();\n  const [newpass, setNewpass] = useState(\"\");\n  const [newpassconf, setNewpassconf] = useState(\"\");\n  const [passerror, setPasserror] = useState(\"\");\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [resetModal, setResetModal] = useState(false);\n  const [issuccModal, setIssuccModal] = useState(false);\n  // console.log(\"toekn\", token);\n  let history = useHistory();\n\n  const resetPass = async () => {\n    try {\n      const payload = { pass: newpass };\n      const response = await axios.post(\n        `${API}/mail/resetpasswordbytoken`,\n        payload,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      // console.log(\"suss\", response.data);\n      // setModalMessage(\"Email verified successfully.\");\n      setIssuccModal(true);\n    } catch (err) {\n      console.log(\"VERIFY ERROR\", err);\n      setModalMessage(\"Sorry, an error occured.\");\n      setMessageModal(true);\n    }\n  };\n  useEffect(() => {\n    // VERIFY EMAIL\n    // resetPass();\n  }, []);\n  const [message, setMessage] = useState(\"Loading...\");\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const resetSuccessfullModal = () => {\n    return (\n      <>\n        <Modal isOpen={issuccModal} onClose={() => setIssuccModal(false)}>\n          <ModalHeader>Password Reset Successfully</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                history.push(\"/signin\");\n              }}\n            >\n              Login to continue\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const loginForm = () => {\n    return (\n      <div className=\"flex items-center min-h-screen p-6 bg-gray-50 bg-gray-900\">\n        {messageModalComponent()}\n        {resetSuccessfullModal()}\n        <div className=\"flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-gray-900  shadow-xl dark:bg-gray-800\">\n          <div className=\" overflow-y-auto md:flex-row  text-white  font-semibold\">\n            <div className=\"text-xl\">Reset Password</div>\n            <div>\n              <div className=\"px-4 py-3 mb-8  rounded-lg shadow-md dark:bg-gray-800\">\n                <label>\n                  <span>New Password</span>\n                  <input\n                    className=\"w-full px-2 py-1 text-sm text-gray-700 bg-gray-200 rounded\"\n                    type=\"password\"\n                    value={newpass}\n                    onChange={(e) => setNewpass(e.target.value)}\n                    placeholder=\"New Password\"\n                  />\n                </label>{\" \"}\n                <label>\n                  <span>Confirm Password</span>\n                  <input\n                    className=\"w-full px-2 py-1 text-sm text-gray-700 bg-gray-200 rounded\"\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    resetPasswordvalue={newpassconf}\n                    onChange={(e) => {\n                      setNewpassconf(e.target.value);\n                      if (e.target.value != newpass)\n                        setPasserror(\"Passwords do not match!\");\n                      else setPasserror(\"\");\n                    }}\n                  />\n                </label>\n              </div>\n            </div>\n            <div>\n              <Button\n                className=\" m-2 w-full sm:w-auto\"\n                onClick={() => {\n                  if (newpass !== newpassconf) {\n                    setModalMessage(\"Passwords do not match\");\n                    setMessageModal(true);\n                    return;\n                  }\n                  resetPass();\n                }}\n              >\n                Change Password\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return <>{loginForm()}</>;\n};\n\nexport default ForgotPasswordReset;\n"],"sourceRoot":""}