{"version":3,"sources":["components/Typography/PageTitle.js","images/user.png","pages/Influencers/InfluencerPage.js"],"names":["PageTitle","children","className","InfluencerPage","useHistory","id","useParams","useState","PasswordModalOpen","setPasswordModalOpen","isReviewModalOpen","setIsReviewModalOpen","newpass","setNewpass","newpassconf","setNewpassconf","passerror","setPasserror","codeDetails","setCodeDetails","refresh","setRefresh","searchquery","setSearchQuery","setPage","data","totalResults","messageModal","setMessageModal","employeeID","username","email","customerName","address","district","state","locationType","pincode","GSTnumber","contactPerson","contactNo","altContact","WhatsappNo","role","parentCustomerId","show_password","values","setValues","name","enc_password","confpassword","changePassword","a","pass","Axios","url","API","method","user","console","log","getCustomerInfo","res","codeGetter","payload","pages","page","limit","filters","creatorId","fromDate","toDate","UserProfile","getId","response","out","useEffect","isOpen","onClose","type","value","onChange","e","target","placeholder","valid","onClick","post","src","UserPng","userId","phone","city","country","zip","payable","moment","lastpaid","format","getRole","layout","refCode","discount","class","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","map","i","alt","customerId","Date","createdAt","toLocaleDateString","paymentStatus","parseInt","amountTotal","planName","resultsPerPage","label","p"],"mappings":"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","file":"static/js/7.48f97f8f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction PageTitle({ children }) {\r\n  return (\r\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\r\n  )\r\n}\r\n\r\nexport default PageTitle\r\n","export default __webpack_public_path__ + \"static/media/user.55758720.png\";","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { API } from \"../../backend\";\r\nimport UserPng from \"../../images/user.png\";\r\nimport moment from \"moment\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  HelperText,\r\n  Label,\r\n  Button,\r\n  Badge,\r\n  Select,\r\n  TableBody,\r\n  TableContainer,\r\n  Table,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n  TableFooter,\r\n  Avatar,\r\n  Pagination,\r\n} from \"@windmill/react-ui\";\r\n\r\nimport PageTitle from \"../../components/Typography/PageTitle\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\r\nimport Axios from \"axios\";\r\nimport UserProfile from \"../../helper/auth/UserProfile\";\r\n\r\nexport default function InfluencerPage() {\r\n  let history = useHistory();\r\n  const { id } = useParams();\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n  const [PasswordModalOpen, setPasswordModalOpen] = useState(false);\r\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\r\n  const [newpass, setNewpass] = useState(\"\");\r\n  const [newpassconf, setNewpassconf] = useState(\"\");\r\n  const [passerror, setPasserror] = useState(\"\");\r\n\r\n  //   refferal code states\r\n  const [codeDetails, setCodeDetails] = useState([]);\r\n\r\n  //   paymenthistory states\r\n  const [refresh, setRefresh] = useState(true);\r\n  const [searchquery, setSearchQuery] = useState(\"\");\r\n  const [page, setPage] = useState(1);\r\n  const [data, setData] = useState([]);\r\n\r\n  // pagination setup\r\n  const resultsPerPage = 10;\r\n  const [totalResults, setTotalResults] = useState(20);\r\n  //modal\r\n  const [messageModal, setMessageModal] = useState(false);\r\n\r\n  // pagination change control\r\n  function onPageChange(p) {\r\n    setPage(p);\r\n  }\r\n\r\n  // console.log(id);\r\n  const [values, setValues] = useState({\r\n    //both\r\n    employeeID: \"\",\r\n    username: \"\",\r\n    email: \"\",\r\n    // password: \"\",\r\n    // confpassword: \"\",\r\n    //customer\r\n    customerName: \"\",\r\n    // accountId: [],\r\n    //account\r\n    // accountName: \"\",\r\n    // unitId: [],\r\n    // //------> customerName from above\r\n    address: \"\",\r\n    district: \"\",\r\n    state: \"\",\r\n    locationType: \"\",\r\n    pincode: \"\",\r\n    GSTnumber: \"\",\r\n    contactPerson: \"\",\r\n    contactNo: \"\",\r\n    altContact: \"\",\r\n    WhatsappNo: \"\",\r\n    role: 0,\r\n    parentCustomerId: \"\",\r\n    show_password: \"\",\r\n  });\r\n  const [err, setErr] = useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    // accountName: \"\",\r\n    enc_password: \"\",\r\n    confpassword: \"\",\r\n  });\r\n\r\n  const changePassword = async () => {\r\n    let data = { id: id, pass: newpass };\r\n    try {\r\n      let user = await Axios({\r\n        url: `${API}/${id}/resetpassword`,\r\n        method: \"POST\",\r\n        data: data,\r\n      });\r\n      setIsReviewModalOpen(true);\r\n      setPasswordModalOpen(false);\r\n      console.log(\"Done\", user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getCustomerInfo = async () => {\r\n    // console.log(`getting customer info`, id);\r\n    let data = { id: id };\r\n    // console.log(API);\r\n    try {\r\n      let res = await Axios({\r\n        url: `${API}/userinfo`,\r\n        method: \"POST\",\r\n        data: data,\r\n      });\r\n      // calc age\r\n\r\n      //   setValues({\r\n\r\n      //   });\r\n\r\n      console.log(\"Done\", res.data);\r\n      setValues(res.data[0]);\r\n      //   console.log(\"Hello\");\r\n    } catch (error) {\r\n      console.log(`error`, error);\r\n    }\r\n  };\r\n  const codeGetter = async () => {\r\n    console.log(\"checker called\");\r\n    let payload = {\r\n      pages: {\r\n        page: 1,\r\n        limit: resultsPerPage,\r\n      },\r\n      filters: {\r\n        creatorId: id,\r\n        fromDate: \"\",\r\n        toDate: \"\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      let response = await Axios({\r\n        url: `${API}/refferal/${UserProfile.getId()}/getbyuser`,\r\n        method: \"POST\",\r\n        data: payload,\r\n      });\r\n      // console.log(response);\r\n      console.log(\"the code getting\", response.data.out[0]);\r\n      setCodeDetails(response.data.out[0]);\r\n\r\n      //   setTotalResults(response.data.total);\r\n      //   setData(response.data.out);\r\n      //   if (response.data.out.length != 0) {\r\n      //     setCodeExists(true);\r\n      //   }\r\n      // console.log(codeExists);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    await getCustomerInfo();\r\n    await codeGetter();\r\n  }, [refresh]);\r\n\r\n  const messageModalComponent = () => {\r\n    return (\r\n      <>\r\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\r\n          <ModalHeader>\r\n            Click \"Paid\" to reset amount and mark as paid.\r\n          </ModalHeader>\r\n          <ModalBody></ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              className=\"w-full sm:w-auto\"\r\n              onClick={async () => {\r\n                try {\r\n                  let session = await Axios.post(\r\n                    `${API}/user/${UserProfile.getId()}/markInfluencerPaid`,\r\n                    { id: id }\r\n                  );\r\n                  setMessageModal(false);\r\n                  setRefresh(!refresh);\r\n                  console.log(\"success\");\r\n                } catch (error) {\r\n                  console.log(error);\r\n                }\r\n              }}\r\n            >\r\n              Paid!\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const ResetPassModal = () => {\r\n    return (\r\n      <>\r\n        <Modal\r\n          isOpen={PasswordModalOpen}\r\n          onClose={() => setPasswordModalOpen(false)}\r\n        >\r\n          <ModalHeader>Change Password for {values.username}!</ModalHeader>\r\n          <ModalBody>\r\n            <div className=\"px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800\">\r\n              <Label>\r\n                <span>New Password</span>\r\n                <Input\r\n                  className=\"mt-5\"\r\n                  type=\"password\"\r\n                  value={newpass}\r\n                  onChange={(e) => setNewpass(e.target.value)}\r\n                  placeholder=\"New Password\"\r\n                />\r\n              </Label>{\" \"}\r\n              <Label>\r\n                <span>Confirm Password</span>\r\n                <Input\r\n                  className=\"my-5\"\r\n                  type=\"password\"\r\n                  placeholder=\"Confirm Password\"\r\n                  value={newpassconf}\r\n                  onChange={(e) => {\r\n                    setNewpassconf(e.target.value);\r\n                    if (e.target.value != newpass)\r\n                      setPasserror(\"Passwords do not match!\");\r\n                    else setPasserror(\"\");\r\n                  }}\r\n                />\r\n              </Label>\r\n              <HelperText valid={false}>{passerror}</HelperText>\r\n            </div>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              className=\"w-full sm:w-auto\"\r\n              onClick={() => {\r\n                if (newpass !== newpassconf) return;\r\n                changePassword();\r\n              }}\r\n            >\r\n              Change Password\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const PassChangeModal = () => {\r\n    return (\r\n      <>\r\n        <Modal\r\n          isOpen={isReviewModalOpen}\r\n          onClose={() => setIsReviewModalOpen(false)}\r\n        >\r\n          <ModalHeader>Password Updated Successfully!</ModalHeader>\r\n          <ModalBody></ModalBody>\r\n          <ModalFooter>\r\n            <Button\r\n              className=\"w-full sm:w-auto\"\r\n              onClick={() => setIsReviewModalOpen(false)}\r\n            >\r\n              Okay!\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {ResetPassModal()}\r\n      {PassChangeModal()}\r\n      {messageModalComponent()}\r\n      <PageTitle>Profile Information {values.name}</PageTitle>\r\n\r\n      {/* <SectionTitle> </SectionTitle> */}\r\n      <Card className=\"mb-2 mt-24 shadow-md overflow-visible\">\r\n        <CardBody>\r\n          <div className=\"w-full -mt-20 z-30 flex items-center justify-center \">\r\n            <div className=\"flex flex-col items-center justify-center\">\r\n              <img className=\"h-32 w-32 bg-white\" src={UserPng}></img>\r\n              <div className=\"mt-2 text-2xl font-sans font-semibold\">\r\n                {values.userId ? values.userId.name : \"\"}\r\n              </div>\r\n              <div className=\" text-lg \">Influencer</div>\r\n            </div>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <div className=\"flex flex-row flex-wrap xl:flex-nowrap xl:space-x-3  justify-left\">\r\n        <Card className=\"mb-4 w-full xl:w-1/3   shadow-md overflow-visible\">\r\n          <CardBody>\r\n            <div className=\"\">\r\n              <p className=\"text-lg  text-gray-800 dark:text-gray-100\">\r\n                <span className=\"font-semibold\"> Personal Information</span>{\" \"}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Name:</span>{\" \"}\r\n                {values.userId ? values.userId.name : \"\"}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Email:</span> {values.email}\r\n              </p>\r\n\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Phone:</span> {values.phone}\r\n              </p>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n        <Card className=\"mb-4 w-full xl:w-1/3  shadow-md overflow-visible\">\r\n          <CardBody>\r\n            <div className=\" \">\r\n              <p className=\"text-lg  text-gray-800 dark:text-gray-100\">\r\n                <span className=\"font-semibold\"> Contact Information</span>{\" \"}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Address:</span>{\" \"}\r\n                {values.address}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> City:</span> {values.city}\r\n              </p>\r\n\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> State:</span> {values.state}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Country:</span>{\" \"}\r\n                {values.country}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Zip:</span> {values.zip}\r\n              </p>\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n        <Card className=\"mb-4 w-full xl:w-1/3   shadow-md overflow-visible\">\r\n          <CardBody>\r\n            <div className=\"\">\r\n              <p className=\"text-lg  text-gray-800 dark:text-gray-100\">\r\n                <span className=\"font-semibold\"> Amount Payable</span>{\" \"}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Amount:</span>\r\n                {\" $ \"}\r\n                {values.userId ? values.userId.payable : \"\"}\r\n              </p>\r\n              <p className=\"text-md text-gray-700 dark:text-gray-100 py-1\">\r\n                <span className=\"font-semibold\"> Last Paid:</span>{\" \"}\r\n                {values.userId\r\n                  ? moment(values.userId.lastpaid).format(\"DD-MM-YYYY\")\r\n                  : \"\"}\r\n              </p>\r\n              {UserProfile.getRole() == 1 ? (\r\n                <div className=\"flex  items-center justify-center mt-10  \">\r\n                  <Button\r\n                    layout=\"outline\"\r\n                    className=\"w-3/4\"\r\n                    onClick={() => setMessageModal(true)}\r\n                  >\r\n                    Mark as Paid\r\n                  </Button>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n\r\n      <Card className=\"mb-8  shadow-md overflow-visible\">\r\n        <CardBody>\r\n          <div className=\"\">\r\n            <p className=\"text-lg  text-gray-800 dark:text-gray-100\">\r\n              <span className=\"font-semibold\"> Assigned Refferal Code</span>{\" \"}\r\n            </p>\r\n            <p className=\"text-md text-gray-700 dark:text-gray-100 pt-2\">\r\n              <span className=\"font-semibold\"> Code:</span>{\" \"}\r\n              {codeDetails ? codeDetails.refCode : null}\r\n            </p>\r\n            <p className=\"text-md text-gray-700 dark:text-gray-100 \">\r\n              <span className=\"font-semibold\"> Discount:</span>{\" \"}\r\n              {codeDetails ? codeDetails.discount : null}%\r\n            </p>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      {/* ------------------Payment History ----------------------------- */}\r\n      <Card className=\"mb-8  shadow-md overflow-visible\">\r\n        <CardBody>\r\n          <div className=\"text-lg  text-gray-800 dark:text-gray-100 mb-6\">\r\n            <span className=\"font-semibold\">Refferal Usage History</span>{\" \"}\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\r\n            <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full xl:space-x-2 \">\r\n              {/* ---------------------------Condition Drop Down-------------------------------------- */}\r\n              <div class=\"relative mx-1 \">\r\n                <select\r\n                  class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-1 xl:py-2  xl: px-4  leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\r\n                  // value={condition}\r\n                  onChange={(e) => {\r\n                    // setCondition(e.target.value);\r\n                  }}\r\n                >\r\n                  <option value=\"\" disabled selected>\r\n                    Plan\r\n                  </option>\r\n                  <option value=\"\">All</option>\r\n                  <option value=\"\">No Plan</option>\r\n                  <option value=\"Good\">Gold</option>\r\n                  <option value=\"Bad\">Silver</option>\r\n                  <option value=\"Used\">Bronze</option>\r\n                </select>\r\n\r\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\r\n                  <svg\r\n                    class=\"fill-current h-4 w-4\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 20 20\"\r\n                  >\r\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n\r\n              {/* -----------------Search Bar------------------------------------ */}\r\n              <div class=\"block relative xl:ml-64 mt-2 xl:mt-0 ml-1\">\r\n                <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\r\n                  <svg\r\n                    viewBox=\"0 0 24 24\"\r\n                    class=\"h-4 w-4 fill-current text-gray-500\"\r\n                  >\r\n                    <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\r\n                  </svg>\r\n                </span>\r\n                <form\r\n                  onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    setRefresh(!refresh);\r\n                  }}\r\n                >\r\n                  <input\r\n                    value={searchquery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    placeholder=\"Search\"\r\n                    class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block py-1 px-8  xl:pl-8 xl:pr-6 xl:py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\r\n                  />\r\n                </form>\r\n              </div>\r\n\r\n              {/* <div class=\"block relative xl:ml-64\">\r\n            <Button\r\n              layout=\"outline\"\r\n              onClick={() => {\r\n                // setIsDwnldModalOpen(true);\r\n              }}\r\n            >\r\n              Download Database\r\n            </Button>\r\n          </div> */}\r\n            </div>\r\n          </div>\r\n\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHeader>\r\n                <tr>\r\n                  <TableCell>User</TableCell>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Amount</TableCell>\r\n                  <TableCell>Plan</TableCell>\r\n                </tr>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {data.map((user, i) => (\r\n                  <TableRow key={i}>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center text-sm\">\r\n                        <Avatar\r\n                          className=\"hidden mr-3 md:block\"\r\n                          src={UserPng}\r\n                          alt=\"User image\"\r\n                        />\r\n                        <div>\r\n                          <p className=\"font-semibold\">\r\n                            {user.customerId.name}\r\n                          </p>\r\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\r\n                            {user.customerId.email}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <p className=\"font-semibold text-sm\">\r\n                        {new Date(user.createdAt).toLocaleDateString()}\r\n                      </p>\r\n                    </TableCell>\r\n\r\n                    <TableCell>\r\n                      <Badge className=\"text-sm \">{user.paymentStatus}</Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"text-sm font-bold\">\r\n                        {parseInt(user.amountTotal) / 100}\r\n                      </span>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <span className=\"text-sm   \">{user.planName}</span>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n            <TableFooter>\r\n              <Pagination\r\n                totalResults={totalResults}\r\n                resultsPerPage={resultsPerPage}\r\n                label=\"Table navigation\"\r\n                onChange={onPageChange}\r\n              />\r\n            </TableFooter>\r\n          </TableContainer>\r\n        </CardBody>\r\n      </Card>\r\n      {/* <Card className=\"mb-8  shadow-md overflow-visible\">\r\n        <CardBody>\r\n          <div className=\"flex flex-wrap flex-col md:flex-row space-y-2   \">\r\n            <Link className=\"w-full\" to={`/app/employee/${id}/update`}>\r\n              <Button className=\" w-full \">Update Info</Button>\r\n            </Link>\r\n            <Link className=\"w-full\" to={`/app/employee/${id}/viewsalary`}>\r\n              <Button className=\" w-full\">Payment History</Button>\r\n            </Link>\r\n            <Button\r\n              className=\"w-full\"\r\n              onClick={() => setPasswordModalOpen(true)}\r\n            >\r\n              Reset Password\r\n            </Button>\r\n\r\n            <Button className=\"mx-3\">Delete Customer</Button>\r\n          </div>\r\n        </CardBody>\r\n      </Card> */}\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}